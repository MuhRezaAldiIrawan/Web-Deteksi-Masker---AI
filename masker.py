# -*- coding: utf-8 -*-
"""masker

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15E_sjcXH6PTB9WrUf1__pVYqCe9TYypo
"""

import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# versi tensorflow yang digunakan harus versi 2 ke atas
print(tf.__version__)

from google.colab import drive
drive.mount('/content/drive')

!unzip "/content/drive/My Drive/masker.zip" -d "/content/drive/My Drive/masker/"

# membuat sebuah direktori
base_dir = '/content/drive/My Drive/masker/dataset'

import os
os.listdir('/content/drive/My Drive/masker/dataset')

train_datamask = ImageDataGenerator(
    rescale = 1./225,
    rotation_range = 20,
    horizontal_flip = True,
    shear_range = 0.2,
    validation_split = 0.4, # set validation split 
    fill_mode = 'nearest')

test_datamask = ImageDataGenerator(
                    rescale=1./255
                  )

train_generator = train_datamask.flow_from_directory(
        base_dir,  # direktori data
        target_size=(150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=32,
        class_mode='binary',  # karena terdapat 3  kelas maka menggunakan class_mode = 'categorical'
        subset='training') # set as training data

validation_generator = train_datamask.flow_from_directory(
        base_dir,  # direktori data
        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=32,
        class_mode='binary', # karena terdapat 2  kelas maka menggunakan class_mode = 'binary'
        subset='validation') # set as validation data

# membuat model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid') # karena terdapat 3 kelas maka digunakan 'softmax'
])

model.compile(loss='binary_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit(
    train_generator,
    steps_per_epoch = 25,  # banyaknya batch yang akan dieksekusi pada setiap epoch
    epochs = 20,
    validation_data=validation_generator, # menampilkan akurasi pengujian data validasi
    validation_steps = 5,
    verbose =2
)

model.save('drive/MyDrive/masker.h5')

# mengecek kelas dari data training
train_generator.class_indices

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0][0]==0:
    print('with mask')
  else:
    print('without mask')

